loss = "mean_squared_error",
metrics = c("accuracy")
)
nn.model %>% summary()
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 60,
batch_size = 256,
validation_split = 0.1
)
sgd = optimizer_sgd(lr = 0.02)
nn.model <- keras_model_sequential() %>%
layer_dense(units = 32, activation = 'relu', input_shape = c(4216),
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 32, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
# layer_dense(units = 16, activation = "relu",
#           kernel_regularizer = regularizer_l2(l = 0.01)) %>%
layer_dense(units = 1, activation = "sigmoid")
nn.model %>% compile(
optimizer = sgd,
loss = "mean_squared_error",
metrics = c("accuracy")
)
nn.model %>% summary()
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 60,
batch_size = 256,
validation_split = 0.1
)
sgd = optimizer_sgd(lr = 0.03)
nn.model <- keras_model_sequential() %>%
layer_dense(units = 32, activation = 'relu', input_shape = c(4216),
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 32, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
# layer_dense(units = 16, activation = "relu",
#           kernel_regularizer = regularizer_l2(l = 0.01)) %>%
layer_dense(units = 1, activation = "sigmoid")
nn.model %>% compile(
optimizer = sgd,
loss = "mean_squared_error",
metrics = c("accuracy")
)
nn.model %>% summary()
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 60,
batch_size = 256,
validation_split = 0.1
)
sgd = optimizer_sgd(lr = 0.03)
nn.model <- keras_model_sequential() %>%
layer_dense(units = 32, activation = 'relu', input_shape = c(4216),
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 32, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
# layer_dense(units = 16, activation = "relu",
#           kernel_regularizer = regularizer_l2(l = 0.01)) %>%
layer_dense(units = 1, activation = "sigmoid")
nn.model %>% compile(
optimizer = sgd,
loss = "mean_squared_error",
metrics = c("accuracy")
)
nn.model %>% summary()
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 60,
batch_size = 256,
validation_split = 0.2
)
results <- nn.model %>% evaluate(nn.data.test.x, nn.data.test.y)
nn.model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = 'relu', input_shape = c(4216),
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 16, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 16, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dense(units = 1, activation = "sigmoid")
nn.model %>% compile(
optimizer = sgd,
loss = "mean_squared_error",
metrics = c("accuracy")
)
nn.model %>% summary()
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 60,
batch_size = 256,
validation_split = 0.2
)
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 60,
batch_size = 256,
validation_split = 0.2
)
results <- nn.model %>% evaluate(nn.data.test.x, nn.data.test.y)
sgd = optimizer_sgd(lr = 0.05)
nn.model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = 'relu', input_shape = c(4216),
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 16, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 16, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dense(units = 1, activation = "sigmoid")
nn.model %>% compile(
optimizer = sgd,
loss = "mean_squared_error",
metrics = c("accuracy")
)
nn.model %>% summary()
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 60,
batch_size = 256,
validation_split = 0.2
)
results <- nn.model %>% evaluate(nn.data.test.x, nn.data.test.y)
sgd = optimizer_sgd(lr = 0.07)
nn.model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = 'relu', input_shape = c(4216),
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 16, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 16, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dense(units = 1, activation = "sigmoid")
nn.model %>% compile(
optimizer = sgd,
loss = "mean_squared_error",
metrics = c("accuracy")
)
nn.model %>% summary()
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 60,
batch_size = 256,
validation_split = 0.2
)
results <- nn.model %>% evaluate(nn.data.test.x, nn.data.test.y)
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 20,
batch_size = 256,
validation_split = 0.2
)
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 20,
batch_size = 256,
validation_split = 0.2
)
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 100,
batch_size = 256,
validation_split = 0.2
)
nn.model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = 'relu', input_shape = c(4216),
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 16, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
# layer_dense(units = 16, activation = "relu",
#           kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dense(units = 1, activation = "sigmoid")
nn.model %>% compile(
optimizer = sgd,
loss = "mean_squared_error",
metrics = c("accuracy")
)
nn.model %>% summary()
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 100,
batch_size = 256,
validation_split = 0.2
)
results <- nn.model %>% evaluate(nn.data.test.x, nn.data.test.y)
sgd = optimizer_sgd(lr = 0.07)
sgd = optimizer_sgd(lr = 0.07)
nn.model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = 'relu', input_shape = c(4216),
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 16, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
# layer_dense(units = 16, activation = "relu",
#           kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dense(units = 1, activation = "sigmoid")
nn.model %>% compile(
optimizer = sgd,
loss = "mean_squared_error",
metrics = c("accuracy")
)
nn.model %>% summary()
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 100,
batch_size = 256,
validation_split = 0.2
)
results <- nn.model %>% evaluate(nn.data.test.x, nn.data.test.y)
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 50,
batch_size = 256,
validation_split = 0.2
)
sgd = optimizer_sgd(lr = 0.07)
nn.model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = 'relu', input_shape = c(4216),
kernel_regularizer = regularizer_l2(l = 0.007)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 16, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.007)) %>%
layer_dropout(rate = 0.3) %>%
# layer_dense(units = 16, activation = "relu",
#           kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dense(units = 1, activation = "sigmoid")
nn.model %>% compile(
optimizer = sgd,
loss = "mean_squared_error",
metrics = c("accuracy")
)
nn.model %>% summary()
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 50,
batch_size = 256,
validation_split = 0.2
)
results <- nn.model %>% evaluate(nn.data.test.x, nn.data.test.y)
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 20,
batch_size = 256,
validation_split = 0.2
)
results <- nn.model %>% evaluate(nn.data.test.x, nn.data.test.y)
nn.model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = 'relu', input_shape = c(4216),
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 16, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 16, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dense(units = 1, activation = "sigmoid")
nn.model %>% compile(
optimizer = sgd,
loss = "mean_squared_error",
metrics = c("accuracy")
)
nn.model %>% summary()
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 20,
batch_size = 512,
validation_split = 0.2
)
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 20,
batch_size = 512,
validation_split = 0.2
)
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 20,
batch_size = 512,
validation_split = 0.2
)
results <- nn.model %>% evaluate(nn.data.test.x, nn.data.test.y)
sgd = optimizer_sgd(lr = 0.05)
nn.model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = 'relu', input_shape = c(4216),
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 16, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
# layer_dense(units = 16, activation = "relu",
#           kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dense(units = 1, activation = "sigmoid")
nn.model %>% compile(
optimizer = sgd,
loss = "mean_squared_error",
metrics = c("accuracy")
)
nn.model %>% summary()
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 20,
batch_size = 512,
validation_split = 0.2
)
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 20,
batch_size = 512,
validation_split = 0.2
)
plot(nn.fit1)
plot(nn.fit1)
nn.model <- keras_model_sequential() %>%
layer_dense(units = 32, activation = 'relu', input_shape = c(4216),
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 32, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
# layer_dense(units = 16, activation = "relu",
#           kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dense(units = 1, activation = "sigmoid")
nn.model %>% compile(
optimizer = sgd,
loss = "mean_squared_error",
metrics = c("accuracy")
)
nn.model %>% summary()
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 50,
batch_size = 512,
validation_split = 0.2
)
sgd = optimizer_sgd(lr = 0.07)
nn.model <- keras_model_sequential() %>%
layer_dense(units = 32, activation = 'relu', input_shape = c(4216),
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 32, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
# layer_dense(units = 16, activation = "relu",
#           kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dense(units = 1, activation = "sigmoid")
nn.model %>% compile(
optimizer = sgd,
loss = "mean_squared_error",
metrics = c("accuracy")
)
nn.model %>% summary()
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 50,
batch_size = 512,
validation_split = 0.2
)
sgd = optimizer_sgd(lr = 0.1)
nn.model <- keras_model_sequential() %>%
layer_dense(units = 32, activation = 'relu', input_shape = c(4216),
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 32, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
# layer_dense(units = 16, activation = "relu",
#           kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dense(units = 1, activation = "sigmoid")
nn.model %>% compile(
optimizer = sgd,
loss = "mean_squared_error",
metrics = c("accuracy")
)
nn.model %>% summary()
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 50,
batch_size = 512,
validation_split = 0.2
)
results <- nn.model %>% evaluate(nn.data.test.x, nn.data.test.y)
sgd = optimizer_sgd(lr = 0.12)
nn.model <- keras_model_sequential() %>%
layer_dense(units = 32, activation = 'relu', input_shape = c(4216),
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 32, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
# layer_dense(units = 16, activation = "relu",
#           kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dense(units = 1, activation = "sigmoid")
nn.model %>% compile(
optimizer = sgd,
loss = "mean_squared_error",
metrics = c("accuracy")
)
nn.model %>% summary()
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 50,
batch_size = 512,
validation_split = 0.2
)
results <- nn.model %>% evaluate(nn.data.test.x, nn.data.test.y)
sgd = optimizer_sgd(lr = 0.15)
nn.model <- keras_model_sequential() %>%
layer_dense(units = 32, activation = 'relu', input_shape = c(4216),
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 32, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
# layer_dense(units = 16, activation = "relu",
#           kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dense(units = 1, activation = "sigmoid")
nn.model %>% compile(
optimizer = sgd,
loss = "mean_squared_error",
metrics = c("accuracy")
)
nn.model %>% summary()
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 50,
batch_size = 512,
validation_split = 0.2
)
results <- nn.model %>% evaluate(nn.data.test.x, nn.data.test.y)
sgd = optimizer_sgd(lr = 0.1)
nn.model <- keras_model_sequential() %>%
layer_dense(units = 32, activation = 'relu', input_shape = c(4216),
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 32, activation = "relu",
kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dropout(rate = 0.3) %>%
# layer_dense(units = 16, activation = "relu",
#           kernel_regularizer = regularizer_l2(l = 0.005)) %>%
layer_dense(units = 1, activation = "sigmoid")
nn.model %>% compile(
optimizer = sgd,
loss = "mean_squared_error",
metrics = c("accuracy")
)
nn.model %>% summary()
nn.fit1 <- nn.model %>% fit(
nn.data.train.x,
nn.data.train.y,
epochs = 50,
batch_size = 512,
validation_split = 0.2
)
results <- nn.model %>% evaluate(nn.data.test.x, nn.data.test.y)
title.corpus <- VCorpus(VectorSource(reviews$REVIEW_TITLE)) %>% tm_map(removeWords, stopwords()) %>% tm_map(removePunctuation) %>%
tm_map(removeNumbers) %>% tm_map(content_transformer(tolower)) %>% tm_map(stemDocument, lazy = TRUE)
dtm.title <- DocumentTermMatrix(title.corpus)
dtm.title <- DocumentTermMatrix(title.corpus)
dtm.title.sparse <- removeSparseTerms(dtm.title, .997)
dim(dtm.title.sparse)
dtm.title.sparse <- removeSparseTerms(dtm.title, .999)
dim(dtm.title.sparse)
dtm.title.sparse <- removeSparseTerms(dtm.title, .998)
dim(dtm.title.sparse)
colnames(dtm.title.sparse) <- paste('title', colnames(dtm.title.sparse), sep = '_')
reviews.titles <- data.frame(reviews.corpus, as.matrix(dtm.title.sparse))
dim(reviews.titles)
nn.data.titles <- reviews.titles[, -c(1,6,7,8,9)]
dummy <- acm.disjonctif(nn.data.titles['PRODUCT_CATEGORY'])
nn.data.titles['PRODUCT_CATEGORY'] = NULL
nn.data.titles  <- cbind(nn.data.titles, dummy)
shiny::runApp('Desktop/Penn/Spring 2019/OIDD 245/Data Project 2/web-app/AmazonFakeReviews')
